name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # Job 1: Frontend Build and Push to DockerHub
  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build frontend image
        run: docker build -t sohaibshoukat56/weather-frontend ./frontend

      - name: Push frontend image to DockerHub
        run: docker push sohaibshoukat56/weather-frontend:latest

      - name: Run frontend linter (example for JavaScript)
        run: |
          cd frontend
          npm install eslint
          npx eslint .

  # Job 2: Backend Build and Push to DockerHub
  build-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build backend image
        run: docker build -t sohaibshoukat56/weather-backend ./backend

      - name: Push backend image to DockerHub
        run: docker push sohaibshoukat56/weather-backend:latest

      - name: Run backend unit tests
        run: |
          docker run sohaibshoukat56/weather-backend npm test

      - name: Run backend linter (example for Python)
        run: |
          cd backend
          pip install pylint
          pylint app.py

  # Job 3: Security and Static Analysis
  security-sast:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run SAST scan (example with Bandit for Python)
        run: |
          cd backend
          pip install bandit
          bandit -r .

      - name: Run SAST scan (example with SonarCloud for JavaScript)
        run: |
          cd frontend
          npm install -g sonar-scanner
          sonar-scanner

  # Job 4: Caching and Artifact Collection for Optimization
  cache-and-artifacts:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache dependencies for frontend
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Cache dependencies for backend
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Save test results for frontend and backend
        if: always()
        run: |
          mkdir -p test-results/frontend
          mkdir -p test-results/backend
          # Create placeholder test result files if they're not generated
          touch test-results/frontend/test-results.xml
          touch test-results/backend/test-results.xml
        continue-on-error: true

      - name: Upload test results as artifacts
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: test-results
